/*
 * Authentication Service API
 * Authentication and Authorization
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package apiPackage;

import com.sun.jersey.api.client.GenericType;

import invokerPackage.ApiException;
import invokerPackage.ApiClient;
import invokerPackage.Configuration;
import modelPackage.*;
import invokerPackage.Pair;

import modelPackage.IDPUserV1;
import modelPackage.SingleResponseV1OAuthTokenV1;


  import java.util.ArrayList;
  import java.util.HashMap;
  import java.util.List;
  import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-02T00:57:29.075-06:00")
  public class IdentityProviderApi {
  private ApiClient localVariablePrefixapiClient;

  public IdentityProviderApi() {
  this(Configuration.getDefaultApiClient());
  }

  public IdentityProviderApi(ApiClient apiClient) {
  this.localVariablePrefixapiClient = apiClient;
  }

  public ApiClient getApiClient() {
  return localVariablePrefixapiClient;
  }

  public void setApiClient(ApiClient apiClient) {
  this.localVariablePrefixapiClient = apiClient;
  }

    /**
    * Get token
    * Exchange a user name and password for a token
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param idpUser The user we are getting the token for (optional)
      * @return SingleResponseV1OAuthTokenV1
    * @throws ApiException if fails to make API call
    */
    public SingleResponseV1OAuthTokenV1 getAccessTokenUsingPOST(String productId, String tenantId, String entityId, IDPUserV1 idpUser) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = idpUser;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling getAccessTokenUsingPOST");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling getAccessTokenUsingPOST");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling getAccessTokenUsingPOST");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/token"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();


    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<SingleResponseV1OAuthTokenV1> localVariablePrefixlocalVarReturnType = new GenericType<SingleResponseV1OAuthTokenV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "POST", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    /**
    * Refresh token
    * Exchange a refresh token for a new access token
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param refreshToken Refresh token (optional)
      * @return SingleResponseV1OAuthTokenV1
    * @throws ApiException if fails to make API call
    */
    public SingleResponseV1OAuthTokenV1 getRefreshTokenUsingPOST(String productId, String tenantId, String entityId, String refreshToken) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = refreshToken;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling getRefreshTokenUsingPOST");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling getRefreshTokenUsingPOST");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling getRefreshTokenUsingPOST");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/token/refresh"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();


    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<SingleResponseV1OAuthTokenV1> localVariablePrefixlocalVarReturnType = new GenericType<SingleResponseV1OAuthTokenV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "POST", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    }
