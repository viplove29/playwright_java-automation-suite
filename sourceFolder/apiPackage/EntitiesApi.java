/*
 * Authentication Service API
 * Authentication and Authorization
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package apiPackage;

import com.sun.jersey.api.client.GenericType;

import invokerPackage.ApiException;
import invokerPackage.ApiClient;
import invokerPackage.Configuration;
import modelPackage.*;
import invokerPackage.Pair;

import modelPackage.ERRORUNKNOWN;
import modelPackage.EmptyResponseV1;
import modelPackage.EntityV1;
import modelPackage.SingleResponseV1EntityBranchV1;
import modelPackage.SingleResponseV1EntityV1;


  import java.util.ArrayList;
  import java.util.HashMap;
  import java.util.List;
  import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-02T00:57:29.075-06:00")
  public class EntitiesApi {
  private ApiClient localVariablePrefixapiClient;

  public EntitiesApi() {
  this(Configuration.getDefaultApiClient());
  }

  public EntitiesApi(ApiClient apiClient) {
  this.localVariablePrefixapiClient = apiClient;
  }

  public ApiClient getApiClient() {
  return localVariablePrefixapiClient;
  }

  public void setApiClient(ApiClient apiClient) {
  this.localVariablePrefixapiClient = apiClient;
  }

    /**
    * Create Entity
    * Create an Entity within the Context provided
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param toBeCreated A new Entity to be created (optional)
      * @return SingleResponseV1EntityV1
    * @throws ApiException if fails to make API call
    */
    public SingleResponseV1EntityV1 createEntityUsingPOST(String productId, String tenantId, String entityId, EntityV1 toBeCreated) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = toBeCreated;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling createEntityUsingPOST");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling createEntityUsingPOST");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling createEntityUsingPOST");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/{productId}/{tenantId}/entities/{entityId}/entities"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();


    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<SingleResponseV1EntityV1> localVariablePrefixlocalVarReturnType = new GenericType<SingleResponseV1EntityV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "POST", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    /**
    * Create or update Entity
    * Create or update an Entity specified by the Context provided
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param entityIdToWrite ID of Entity to update/create (required)
      * @param toBeUpdated An Entity to be updated/created (optional)
      * @return SingleResponseV1EntityV1
    * @throws ApiException if fails to make API call
    */
    public SingleResponseV1EntityV1 createOrUpdateEntityUsingPUT(String productId, String tenantId, String entityId, String entityIdToWrite, EntityV1 toBeUpdated) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = toBeUpdated;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling createOrUpdateEntityUsingPUT");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling createOrUpdateEntityUsingPUT");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling createOrUpdateEntityUsingPUT");
      }
    
      // verify the required parameter 'entityIdToWrite' is set
      if (entityIdToWrite == null) {
      throw new ApiException(400, "Missing the required parameter 'entityIdToWrite' when calling createOrUpdateEntityUsingPUT");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/{productId}/{tenantId}/entities/{entityId}/entities/{entityIdToWrite}"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()))
      .replaceAll("\\{" + "entityIdToWrite" + "\\}", localVariablePrefixapiClient.escapeString(entityIdToWrite.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();


    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<SingleResponseV1EntityV1> localVariablePrefixlocalVarReturnType = new GenericType<SingleResponseV1EntityV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "PUT", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    /**
    * Delete And Migrate Entity
    * Delete an Entity and re-parents it&#39;s children to a parent specified in the request
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param entityIdToDelete ID of Entity to delete (required)
      * @param migrateTo ID of Entity to migrate child data to (required)
      * @return EmptyResponseV1
    * @throws ApiException if fails to make API call
    */
    public EmptyResponseV1 deleteAndMigrateEntityUsingDELETE(String productId, String tenantId, String entityId, String entityIdToDelete, String migrateTo) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = null;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling deleteAndMigrateEntityUsingDELETE");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling deleteAndMigrateEntityUsingDELETE");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling deleteAndMigrateEntityUsingDELETE");
      }
    
      // verify the required parameter 'entityIdToDelete' is set
      if (entityIdToDelete == null) {
      throw new ApiException(400, "Missing the required parameter 'entityIdToDelete' when calling deleteAndMigrateEntityUsingDELETE");
      }
    
      // verify the required parameter 'migrateTo' is set
      if (migrateTo == null) {
      throw new ApiException(400, "Missing the required parameter 'migrateTo' when calling deleteAndMigrateEntityUsingDELETE");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/{productId}/{tenantId}/entities/{entityId}/entities/{entityIdToDelete}{?migrateTo}"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()))
      .replaceAll("\\{" + "entityIdToDelete" + "\\}", localVariablePrefixapiClient.escapeString(entityIdToDelete.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();

      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("migrateTo", migrateTo));

    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<EmptyResponseV1> localVariablePrefixlocalVarReturnType = new GenericType<EmptyResponseV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "DELETE", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    /**
    * Delete Entity
    * Delete an Entity specified by the Context provided
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param entityIdToDelete ID of Entity to delete (required)
      * @param requestParams requestParams (required)
      * @return EmptyResponseV1
    * @throws ApiException if fails to make API call
    */
    public EmptyResponseV1 deleteEntityUsingDELETE(String productId, String tenantId, String entityId, String entityIdToDelete, ERRORUNKNOWN requestParams) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = null;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling deleteEntityUsingDELETE");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling deleteEntityUsingDELETE");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling deleteEntityUsingDELETE");
      }
    
      // verify the required parameter 'entityIdToDelete' is set
      if (entityIdToDelete == null) {
      throw new ApiException(400, "Missing the required parameter 'entityIdToDelete' when calling deleteEntityUsingDELETE");
      }
    
      // verify the required parameter 'requestParams' is set
      if (requestParams == null) {
      throw new ApiException(400, "Missing the required parameter 'requestParams' when calling deleteEntityUsingDELETE");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/{productId}/{tenantId}/entities/{entityId}/entities/{entityIdToDelete}{?requestParams}"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()))
      .replaceAll("\\{" + "entityIdToDelete" + "\\}", localVariablePrefixapiClient.escapeString(entityIdToDelete.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();

      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("requestParams", requestParams));

    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<EmptyResponseV1> localVariablePrefixlocalVarReturnType = new GenericType<EmptyResponseV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "DELETE", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    /**
    * Get Entity Hierarchy
    * Get an Entity and it&#39;s ancestors and descendants given the Context provided
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param entityIdToRetrieve ID of Entity to retrieve (required)
      * @param ancestorLevels Number of ancestors to include,  all includes all ancestors (optional, default to 0)
      * @param ancestorProperties Ancestor properties to include (optional, default to summary)
      * @param descendantLevels Number of descendants to include,  all includes all descendants (optional, default to 0)
      * @param descendantProperties Descendants properties to include (optional, default to summary)
      * @param entityType Entity type to filter on (optional)
      * @return SingleResponseV1EntityBranchV1
    * @throws ApiException if fails to make API call
    */
    public SingleResponseV1EntityBranchV1 getEntityHierarchyUsingGET(String productId, String tenantId, String entityId, String entityIdToRetrieve, String ancestorLevels, String ancestorProperties, String descendantLevels, String descendantProperties, List<String> entityType) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = null;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling getEntityHierarchyUsingGET");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling getEntityHierarchyUsingGET");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling getEntityHierarchyUsingGET");
      }
    
      // verify the required parameter 'entityIdToRetrieve' is set
      if (entityIdToRetrieve == null) {
      throw new ApiException(400, "Missing the required parameter 'entityIdToRetrieve' when calling getEntityHierarchyUsingGET");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/{productId}/{tenantId}/entities/{entityId}/entities/{entityIdToRetrieve}{?ancestor_levels,ancestor_properties,descendant_levels,descendant_properties,entity_type}"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()))
      .replaceAll("\\{" + "entityIdToRetrieve" + "\\}", localVariablePrefixapiClient.escapeString(entityIdToRetrieve.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();

      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("ancestor_levels", ancestorLevels));
      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("ancestor_properties", ancestorProperties));
      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("descendant_levels", descendantLevels));
      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("descendant_properties", descendantProperties));
      localVariablePrefixlocalVarCollectionQueryParams.addAll(localVariablePrefixapiClient.parameterToPairs("multi", "entity_type", entityType));

    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<SingleResponseV1EntityBranchV1> localVariablePrefixlocalVarReturnType = new GenericType<SingleResponseV1EntityBranchV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "GET", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    }
