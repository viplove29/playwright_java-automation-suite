/*
 * Authentication Service API
 * Authentication and Authorization
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package apiPackage;

import com.sun.jersey.api.client.GenericType;

import invokerPackage.ApiException;
import invokerPackage.ApiClient;
import invokerPackage.Configuration;
import modelPackage.*;
import invokerPackage.Pair;

import modelPackage.PagedResponseV1ProductV1LimitOffsetPagingInfoV1;
import modelPackage.ProductV1;
import modelPackage.SingleResponseV1ProductV1;


  import java.util.ArrayList;
  import java.util.HashMap;
  import java.util.List;
  import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-02T00:57:29.075-06:00")
  public class ProductsApi {
  private ApiClient localVariablePrefixapiClient;

  public ProductsApi() {
  this(Configuration.getDefaultApiClient());
  }

  public ProductsApi(ApiClient apiClient) {
  this.localVariablePrefixapiClient = apiClient;
  }

  public ApiClient getApiClient() {
  return localVariablePrefixapiClient;
  }

  public void setApiClient(ApiClient apiClient) {
  this.localVariablePrefixapiClient = apiClient;
  }

    /**
    * Create Product
    * Create a Product
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param productIdToCreate ID of the Product (required)
      * @param toBeCreated A new Product to be created (optional)
      * @return SingleResponseV1ProductV1
    * @throws ApiException if fails to make API call
    */
    public SingleResponseV1ProductV1 createProductUsingPUT(String productId, String tenantId, String entityId, String productIdToCreate, ProductV1 toBeCreated) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = toBeCreated;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling createProductUsingPUT");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling createProductUsingPUT");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling createProductUsingPUT");
      }
    
      // verify the required parameter 'productIdToCreate' is set
      if (productIdToCreate == null) {
      throw new ApiException(400, "Missing the required parameter 'productIdToCreate' when calling createProductUsingPUT");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/{productId}/{tenantId}/entities/{entityId}/products/{productIdToCreate}"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()))
      .replaceAll("\\{" + "productIdToCreate" + "\\}", localVariablePrefixapiClient.escapeString(productIdToCreate.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();


    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<SingleResponseV1ProductV1> localVariablePrefixlocalVarReturnType = new GenericType<SingleResponseV1ProductV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "PUT", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    /**
    * Get Product
    * Retrieves a Product by name
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param filter  (required)
      * @param name Name of the Product (optional)
      * @return SingleResponseV1ProductV1
    * @throws ApiException if fails to make API call
    */
    public SingleResponseV1ProductV1 getProductByNameUsingGET(String productId, String tenantId, String entityId, String filter, String name) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = null;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling getProductByNameUsingGET");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling getProductByNameUsingGET");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling getProductByNameUsingGET");
      }
    
      // verify the required parameter 'filter' is set
      if (filter == null) {
      throw new ApiException(400, "Missing the required parameter 'filter' when calling getProductByNameUsingGET");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/{productId}/{tenantId}/entities/{entityId}/products?filter=byName{&name}"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();

      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("name", name));
      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("filter", filter));

    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<SingleResponseV1ProductV1> localVariablePrefixlocalVarReturnType = new GenericType<SingleResponseV1ProductV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "GET", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    /**
    * Get Product
    * Retrieves a Product by ID
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param productIdToRetrieve ID of the Product (required)
      * @return SingleResponseV1ProductV1
    * @throws ApiException if fails to make API call
    */
    public SingleResponseV1ProductV1 getProductUsingGET(String productId, String tenantId, String entityId, String productIdToRetrieve) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = null;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling getProductUsingGET");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling getProductUsingGET");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling getProductUsingGET");
      }
    
      // verify the required parameter 'productIdToRetrieve' is set
      if (productIdToRetrieve == null) {
      throw new ApiException(400, "Missing the required parameter 'productIdToRetrieve' when calling getProductUsingGET");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/{productId}/{tenantId}/entities/{entityId}/products/{productIdToRetrieve}"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()))
      .replaceAll("\\{" + "productIdToRetrieve" + "\\}", localVariablePrefixapiClient.escapeString(productIdToRetrieve.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();


    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<SingleResponseV1ProductV1> localVariablePrefixlocalVarReturnType = new GenericType<SingleResponseV1ProductV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "GET", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    /**
    * Retrieve Products by Ids
    * Retrieves Products using provided ids
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param filter  (required)
      * @param internal internal (required)
      * @param ids The ids to search by (optional)
      * @param pageSize The maximum number of items to include in the response (optional)
      * @param page The page of items to retrieve (optional)
      * @return PagedResponseV1ProductV1LimitOffsetPagingInfoV1
    * @throws ApiException if fails to make API call
    */
    public PagedResponseV1ProductV1LimitOffsetPagingInfoV1 getProductsByIdsUsingGET(String productId, String tenantId, String entityId, String filter, String internal, List<String> ids, Integer pageSize, Integer page) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = null;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling getProductsByIdsUsingGET");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling getProductsByIdsUsingGET");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling getProductsByIdsUsingGET");
      }
    
      // verify the required parameter 'filter' is set
      if (filter == null) {
      throw new ApiException(400, "Missing the required parameter 'filter' when calling getProductsByIdsUsingGET");
      }
    
      // verify the required parameter 'internal' is set
      if (internal == null) {
      throw new ApiException(400, "Missing the required parameter 'internal' when calling getProductsByIdsUsingGET");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/{productId}/{tenantId}/entities/{entityId}/products?filter=byIds{&ids,pageSize,page,internal}"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();

      localVariablePrefixlocalVarCollectionQueryParams.addAll(localVariablePrefixapiClient.parameterToPairs("multi", "ids", ids));
      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("pageSize", pageSize));
      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("page", page));
      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("filter", filter));
      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("internal", internal));

    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<PagedResponseV1ProductV1LimitOffsetPagingInfoV1> localVariablePrefixlocalVarReturnType = new GenericType<PagedResponseV1ProductV1LimitOffsetPagingInfoV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "GET", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    }
