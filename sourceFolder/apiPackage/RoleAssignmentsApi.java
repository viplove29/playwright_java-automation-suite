/*
 * Authentication Service API
 * Authentication and Authorization
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package apiPackage;

import com.sun.jersey.api.client.GenericType;

import invokerPackage.ApiException;
import invokerPackage.ApiClient;
import invokerPackage.Configuration;
import modelPackage.*;
import invokerPackage.Pair;

import modelPackage.AuthUserRoleAssignmentV1;
import modelPackage.EmptyResponseV1;
import modelPackage.PagedResponseV1AuthUserRoleAssignmentV1LimitOffsetPagingInfoV1;
import modelPackage.SingleResponseV1AuthUserRoleAssignmentV1;
import modelPackage.SingleResponseV1List;


  import java.util.ArrayList;
  import java.util.HashMap;
  import java.util.List;
  import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-02T00:57:29.075-06:00")
  public class RoleAssignmentsApi {
  private ApiClient localVariablePrefixapiClient;

  public RoleAssignmentsApi() {
  this(Configuration.getDefaultApiClient());
  }

  public RoleAssignmentsApi(ApiClient apiClient) {
  this.localVariablePrefixapiClient = apiClient;
  }

  public ApiClient getApiClient() {
  return localVariablePrefixapiClient;
  }

  public void setApiClient(ApiClient apiClient) {
  this.localVariablePrefixapiClient = apiClient;
  }

    /**
    * Assign a Role to multiple Users
    * Assigns a Role to multiple AuthUserV1s specified by the Context provided
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param authUserRoleAssignmentV1 A new AuthUserRoleAssignmentV1 to be created (optional)
      * @return SingleResponseV1List
    * @throws ApiException if fails to make API call
    */
    public SingleResponseV1List bulkGrantRoleUsingPOST(String productId, String tenantId, String entityId, AuthUserRoleAssignmentV1 authUserRoleAssignmentV1) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = authUserRoleAssignmentV1;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling bulkGrantRoleUsingPOST");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling bulkGrantRoleUsingPOST");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling bulkGrantRoleUsingPOST");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/{productId}/{tenantId}/entities/{entityId}/role-assignments/bulk"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();


    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<SingleResponseV1List> localVariablePrefixlocalVarReturnType = new GenericType<SingleResponseV1List>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "POST", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    /**
    * List Role Assignments for a User in a Context
    * Returns Paged AuthUserRoleAssignmentV1 for the specified User given the Context provided
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param filter  (required)
      * @param userId Id of the User (optional)
      * @param pageSize The maximum number of items to include in the response (optional)
      * @param page The page of items to retrieve (optional)
      * @return PagedResponseV1AuthUserRoleAssignmentV1LimitOffsetPagingInfoV1
    * @throws ApiException if fails to make API call
    */
    public PagedResponseV1AuthUserRoleAssignmentV1LimitOffsetPagingInfoV1 findRolesForUserUsingGET(String productId, String tenantId, String entityId, String filter, String userId, Integer pageSize, Integer page) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = null;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling findRolesForUserUsingGET");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling findRolesForUserUsingGET");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling findRolesForUserUsingGET");
      }
    
      // verify the required parameter 'filter' is set
      if (filter == null) {
      throw new ApiException(400, "Missing the required parameter 'filter' when calling findRolesForUserUsingGET");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/{productId}/{tenantId}/entities/{entityId}/role-assignments?filter=byUserId{&userId,pageSize,page}"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();

      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("userId", userId));
      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("pageSize", pageSize));
      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("page", page));
      localVariablePrefixlocalVarQueryParams.addAll(localVariablePrefixapiClient.parameterToPair("filter", filter));

    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<PagedResponseV1AuthUserRoleAssignmentV1LimitOffsetPagingInfoV1> localVariablePrefixlocalVarReturnType = new GenericType<PagedResponseV1AuthUserRoleAssignmentV1LimitOffsetPagingInfoV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "GET", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    /**
    * Assign a Role to a User
    * Assigns a Role to an AuthUserV1 specified by the Context provided
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param authUserRoleAssignmentV1 A new AuthUserRoleAssignmentV1 to be created (optional)
      * @return SingleResponseV1AuthUserRoleAssignmentV1
    * @throws ApiException if fails to make API call
    */
    public SingleResponseV1AuthUserRoleAssignmentV1 grantRoleUsingPOST1(String productId, String tenantId, String entityId, AuthUserRoleAssignmentV1 authUserRoleAssignmentV1) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = authUserRoleAssignmentV1;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling grantRoleUsingPOST1");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling grantRoleUsingPOST1");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling grantRoleUsingPOST1");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/{productId}/{tenantId}/entities/{entityId}/role-assignments"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();


    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<SingleResponseV1AuthUserRoleAssignmentV1> localVariablePrefixlocalVarReturnType = new GenericType<SingleResponseV1AuthUserRoleAssignmentV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "POST", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    /**
    * Revoke a Role from a User
    * Revokes a Role from an AuthUserV1 specified by the Context provided
      * @param productId ID of the product for which the request is being made (required)
      * @param tenantId ID of the tenant for which the request is being made (required)
      * @param entityId ID of the entity for which the request is being made (required)
      * @param authUserRoleAssignmentV1 An AuthUserRoleAssignmentV1 to be deleted (optional)
      * @return EmptyResponseV1
    * @throws ApiException if fails to make API call
    */
    public EmptyResponseV1 revokeRoleFromUsingDELETE1(String productId, String tenantId, String entityId, AuthUserRoleAssignmentV1 authUserRoleAssignmentV1) throws ApiException {
    Object localVariablePrefixlocalVarPostBody = authUserRoleAssignmentV1;
    
      // verify the required parameter 'productId' is set
      if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling revokeRoleFromUsingDELETE1");
      }
    
      // verify the required parameter 'tenantId' is set
      if (tenantId == null) {
      throw new ApiException(400, "Missing the required parameter 'tenantId' when calling revokeRoleFromUsingDELETE1");
      }
    
      // verify the required parameter 'entityId' is set
      if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling revokeRoleFromUsingDELETE1");
      }
    
    // create path and map variables
    String localVariablePrefixlocalVarPath = "/auth/v1/{productId}/{tenantId}/entities/{entityId}/role-assignments"
      .replaceAll("\\{" + "productId" + "\\}", localVariablePrefixapiClient.escapeString(productId.toString()))
      .replaceAll("\\{" + "tenantId" + "\\}", localVariablePrefixapiClient.escapeString(tenantId.toString()))
      .replaceAll("\\{" + "entityId" + "\\}", localVariablePrefixapiClient.escapeString(entityId.toString()));

    // query params
    List<Pair> localVariablePrefixlocalVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVariablePrefixlocalVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVariablePrefixlocalVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVariablePrefixlocalVarFormParams = new HashMap<String, Object>();


    
    
      final String[] localVariablePrefixlocalVarAccepts = {
    "application/json"
      };
      final String localVariablePrefixlocalVarAccept = localVariablePrefixapiClient.selectHeaderAccept(localVariablePrefixlocalVarAccepts);

      final String[] localVariablePrefixlocalVarContentTypes = {
    "application/json"
      };
      final String localVariablePrefixlocalVarContentType = localVariablePrefixapiClient.selectHeaderContentType(localVariablePrefixlocalVarContentTypes);

      String[] localVariablePrefixlocalVarAuthNames = new String[] {  };

        GenericType<EmptyResponseV1> localVariablePrefixlocalVarReturnType = new GenericType<EmptyResponseV1>() {};
        return localVariablePrefixapiClient.invokeAPI(localVariablePrefixlocalVarPath, "DELETE", localVariablePrefixlocalVarQueryParams, localVariablePrefixlocalVarCollectionQueryParams, localVariablePrefixlocalVarPostBody, localVariablePrefixlocalVarHeaderParams, localVariablePrefixlocalVarFormParams, localVariablePrefixlocalVarAccept, localVariablePrefixlocalVarContentType, localVariablePrefixlocalVarAuthNames, localVariablePrefixlocalVarReturnType);
          }
    }
