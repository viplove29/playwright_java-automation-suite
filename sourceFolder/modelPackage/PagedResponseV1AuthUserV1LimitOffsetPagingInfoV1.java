/*
 * Authentication Service API
 * Authentication and Authorization
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package modelPackage;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import modelPackage.AuthUserV1;
import modelPackage.ErrorResponseV1;
import modelPackage.LimitOffsetPagingInfoV1;

/**
 * PagedResponseV1AuthUserV1LimitOffsetPagingInfoV1
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-02T00:57:29.075-06:00")
public class PagedResponseV1AuthUserV1LimitOffsetPagingInfoV1 {
  @SerializedName("content")
  private List<AuthUserV1> content = null;

  @SerializedName("error")
  private ErrorResponseV1 error = null;

  @SerializedName("paging")
  private LimitOffsetPagingInfoV1 paging = null;

  @SerializedName("requestId")
  private String requestId = null;

  @SerializedName("spanId")
  private String spanId = null;

  @SerializedName("traceId")
  private String traceId = null;

   /**
   * The data elements requested
   * @return content
  **/
  @ApiModelProperty(value = "The data elements requested")
  public List<AuthUserV1> getContent() {
    return content;
  }

   /**
   * This field will contain information about the error if one occurred
   * @return error
  **/
  @ApiModelProperty(value = "This field will contain information about the error if one occurred")
  public ErrorResponseV1 getError() {
    return error;
  }

   /**
   * The paging method used
   * @return paging
  **/
  @ApiModelProperty(value = "The paging method used")
  public LimitOffsetPagingInfoV1 getPaging() {
    return paging;
  }

   /**
   * The unique ID of this request.
   * @return requestId
  **/
  @ApiModelProperty(value = "The unique ID of this request.")
  public String getRequestId() {
    return requestId;
  }

   /**
   * The unique ID of the span.
   * @return spanId
  **/
  @ApiModelProperty(value = "The unique ID of the span.")
  public String getSpanId() {
    return spanId;
  }

   /**
   * The unique ID of the trace.
   * @return traceId
  **/
  @ApiModelProperty(value = "The unique ID of the trace.")
  public String getTraceId() {
    return traceId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PagedResponseV1AuthUserV1LimitOffsetPagingInfoV1 pagedResponseV1AuthUserV1LimitOffsetPagingInfoV1 = (PagedResponseV1AuthUserV1LimitOffsetPagingInfoV1) o;
    return Objects.equals(this.content, pagedResponseV1AuthUserV1LimitOffsetPagingInfoV1.content) &&
        Objects.equals(this.error, pagedResponseV1AuthUserV1LimitOffsetPagingInfoV1.error) &&
        Objects.equals(this.paging, pagedResponseV1AuthUserV1LimitOffsetPagingInfoV1.paging) &&
        Objects.equals(this.requestId, pagedResponseV1AuthUserV1LimitOffsetPagingInfoV1.requestId) &&
        Objects.equals(this.spanId, pagedResponseV1AuthUserV1LimitOffsetPagingInfoV1.spanId) &&
        Objects.equals(this.traceId, pagedResponseV1AuthUserV1LimitOffsetPagingInfoV1.traceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, error, paging, requestId, spanId, traceId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PagedResponseV1AuthUserV1LimitOffsetPagingInfoV1 {\n");
    
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    paging: ").append(toIndentedString(paging)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    spanId: ").append(toIndentedString(spanId)).append("\n");
    sb.append("    traceId: ").append(toIndentedString(traceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

