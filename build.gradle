import com.google.gson.Gson
import com.google.gson.JsonElement
import com.google.gson.JsonObject
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

buildscript {
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.90")
        classpath("com.diffplug.spotless:spotless-plugin-gradle:3.26.1")
        classpath('com.vertafore.autotest:qtest-serenity:1.0.1')
    }
}

plugins {
    id 'groovy'
    id 'maven-publish'
    id 'com.bmuschko.nexus' version '2.3.1' apply false
    id "com.diffplug.gradle.spotless" version "3.26.1"
    // swagger code-gen gradle plugin
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

//application{
//    mainClassName = 'com.vertafore.test.utilities.classgenerator.ServiceWrapperGenerator'
//}

allprojects {
    group 'com.vertafore'
    version '0.0.3-SNAPSHOT'

    apply plugin: 'com.vertafore.gradle.qtest.QTestSerenityPlugin'
    apply plugin: 'java-library'
    apply plugin: 'net.serenity-bdd.aggregator'

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    repositories(gradle.nexusConfiguration)
    repositories {
        jcenter()
    }

    // Publish
    apply plugin: 'com.bmuschko.nexus'
    apply plugin: 'net.serenity-bdd.aggregator'

    extraArchive {
        sources = true
        tests = true
        javadoc = true
    }

    nexus {
        sign = false
        repositoryUrl = 'https://nexus.util.v4af.com/repository/libs-release-local/'
        snapshotRepositoryUrl = 'https://nexus.util.v4af.com/repository/libs-snapshot-local/'
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    apply plugin: 'maven-publish'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar
            }
        }
    }

    // Make Gradle use the latest version of SNAPSHOT artifacts (no caching)
    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    test {
        systemProperties System.properties
        systemProperties.remove("java.endorsed.dirs")
    }
}

configurations {
    swaggerCodegenV2
    swaggerCodegenV3
}

dependencies {
    implementation localGroovy()
    // Serenity
    implementation group: 'net.serenity-bdd', name: 'serenity-core', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-model', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-screenplay', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-report-resources', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-screenplay-rest', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-ensure', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-junit', version: '2.0.90'
    // Vertafore
    implementation 'com.vertafore.core:foundation:10.0.1'
    // Service wrapper/model generator util
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    // swagger code-gen
//    swaggerCodegen 'io.swagger:swagger-codegen-cli:2.4.2'             // Swagger Codegen V2
//    implementation 'io.swagger:swagger-codegen-cli:2.4.2'
//    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.5'  // or Swagger Codegen V3
    swaggerCodegen 'org.openapitools:openapi-generator-cli:3.1.1'     // or OpenAPI Generator
    implementation 'org.openapitools:openapi-generator-cli:3.1.1'
//    implementation 'io.swagger:swagger-codegen-cli:2.4.2'
        swaggerCodegen project('generators')
}

// list of services
final List<String> SERVICES = List.of("form", "document");

task getTitanApiSwaggerJson {
    def headers = [ Accept: 'application/json' ]
    // url to get swagger json from
    def rawUrl = "https://api.dev.titan.v4af.com/%s/v2/api-docs?group=%s-service"
    // loop over each service, and write a JSON file of each service to swaggerjson/service/service-name.json
    SERVICES.each{ service ->
        def path = "swaggerjson/%s/%s-service.json"
        def hydratedPath = String.format(path, service, service)
        def hydratedUrl = String.format(rawUrl, service, service)
        def jsonText = new URL( hydratedUrl ).getText( requestProperties: headers )
        new File( hydratedPath ).write jsonText
    }
    // build config file for each service
    SERVICES.each{ service ->
        def pathToConfigFile = "swaggerjson/${service}/${service}-config.json"
        def configJson =  new HashMap<String,String>();
        configJson.put("modelPackage", "com.vertafore.test.models." + service.toString())
        configJson.put("apiPackage", "com.vertafore.test.servicewrappers." + service.toString())
        configJson.put("validateSpec", "false")

        new File( pathToConfigFile ).write new Gson().toJson(configJson)
    }

}

// swagger sources task, looks through each service in the SERVICES array and creates a 'swaggerSources' task.
SERVICES.each {    service ->
    def pathToConfigFile = "swaggerjson/${service}/${service}-config.json"



    def pathToJson = "swaggerjson/${service}/${service}-service.json"
    def outputPath = "${buildDir}/${service}"

    // create a new swaggerSources task
    def ss = swaggerSources.create(service)
    // put the path for the input file
    ss.inputFile = file(pathToJson);
    // configure the settings
    ss.code {
        language = 'generators.ScreenPlay'
        templateDir = file('templates')
        components = ['models', 'apis']
        configFile = file(pathToConfigFile)
        outputDir = file(outputPath)
    }
    }

    spotless {
        java {
            googleJavaFormat('1.6')
        }
    }

    test.finalizedBy(aggregate)
    qtestsync.shouldRunAfter(aggregate)

    gradle.startParameter.continueOnFailure = true


// used to build the generator class before the code gen runs.
    swaggerSources*.code*.dependsOn 'generators:jar'
swaggerSources*.code*.dependsOn 'getTitanApiSwaggerJson'

// on every build we run generate codegen
    build.dependsOn generateSwaggerCode

// on every compile we run out codegen
    compileJava.dependsOn swaggerSources*.code

// add generated code into our src/main class path so it can be consumed in our tests.
    SERVICES.each { service ->
        sourceSets {
            main {
                java {
                    srcDir "$buildDir/${service}"
                }
                resources {
                    srcDir "$buildDir/${service}/src/main/resources"
                }
            }
        }
    }
