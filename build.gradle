import com.google.gson.Gson

buildscript {
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.2.1")
        classpath("com.diffplug.spotless:spotless-plugin-gradle:3.26.1")
    }
}

plugins {
    id 'groovy'
    id 'maven-publish'
    id 'com.bmuschko.nexus' version '2.3.1' apply false
    id "com.diffplug.gradle.spotless" version "3.26.1"

    /**
     swagger code-gen gradle plugin (necessary to run generateSwaggerCode )
     https://github.com/int128/gradle-swagger-generator-plugin

     while we are using 'swagger-code-gen' we are using the openAPI to do the actual code generation.
     */

    id 'org.hidetake.swagger.generator' version '2.18.2'
}


allprojects {
    group 'com.vertafore'
    version '0.0.3-SNAPSHOT'

    apply plugin: 'java-library'
    apply plugin: 'net.serenity-bdd.aggregator'

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    repositories(gradle.nexusConfiguration)

    // Publish
    apply plugin: 'com.bmuschko.nexus'
    apply plugin: 'net.serenity-bdd.aggregator'

    extraArchive {
        sources = true
        tests = true
        javadoc = true
    }

    nexus {
        sign = false
        repositoryUrl = 'https://nexus.util.v4af.com/repository/libs-release-local/'
        snapshotRepositoryUrl = 'https://nexus.util.v4af.com/repository/libs-snapshot-local/'
    }


    task sourceJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    apply plugin: 'maven-publish'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar
            }
        }
    }
    // Make Gradle use the latest version of SNAPSHOT artifacts (no caching)
    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }
    test {
        systemProperties System.properties
        systemProperties.remove("java.endorsed.dirs")
    }
}

spotless {
    java {
        googleJavaFormat('1.6')
        spotlessJavaApply
        removeUnusedImports()
    }
}

test.finalizedBy(aggregate)
gradle.startParameter.continueOnFailure = true

dependencies {
    // necessary for building & compiling our custom generator in /generators.
    implementation localGroovy()
    // Serenity
    implementation group: 'net.serenity-bdd', name: 'serenity-core', version: '2.2.1'
    implementation group: 'net.serenity-bdd', name: 'serenity-model', version: '2.2.1'
    implementation group: 'net.serenity-bdd', name: 'serenity-screenplay', version: '2.2.1'
    implementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: '2.2.1'
    implementation group: 'net.serenity-bdd', name: 'serenity-report-resources', version: '2.2.1'
    implementation group: 'net.serenity-bdd', name: 'serenity-screenplay-rest', version: '2.2.1'
    implementation group: 'net.serenity-bdd', name: 'serenity-ensure', version: '2.2.1'
    implementation group: 'net.serenity-bdd', name: 'serenity-junit', version: '2.2.1'
    // Vertafore
    implementation 'com.vertafore.core:foundation:11.0.0-SNAPSHOT'
    // openAPI
    swaggerCodegen 'org.openapitools:openapi-generator-cli:4.3.0'
    implementation 'org.openapitools:openapi-generator-cli:4.3.0'

    // swaggerCodeGen needs the custom generator we have in /generators
    swaggerCodegen project('generators')
}

/**
 * Codegen configuration starts here.
 */

/**
 * List of all services being built.
 */
final List<String> SERVICES = List.of("form", "document");


/**
 * This task reaches out to the swagger for each service and write a json file.
 *
 * Once we have each file we write another json file for configuring the paths of where each
 * service code-gen should be stored in the name space.
 */
task getTitanApiSwaggerJson {
    def headers = [ Accept: 'application/json' ]
    // url to get swagger json from
    def rawUrl = "https://api.dev.titan.v4af.com/%s/v2/api-docs?group=%s-service"
    // loop over each service, and write a JSON file of each service to swaggerjson/service/service-name.json
    SERVICES.each{ service ->
        def path = "swaggerjson/%s/%s-service.json"
        def hydratedPath = String.format(path, service, service)
        def hydratedUrl = String.format(rawUrl, service, service)
        def jsonText = new URL( hydratedUrl ).getText( requestProperties: headers )
        new File( hydratedPath ).write jsonText
    }
    // build config file for each service
    SERVICES.each{ service ->
        def pathToConfigFile = "swaggerjson/${service}/${service}-config.json"
        def configJson =  new HashMap<String,String>();
        configJson.put("modelPackage", "com.vertafore.test.models." + service.toString())
        configJson.put("apiPackage", "com.vertafore.test.servicewrappers")
        configJson.put("validateSpec", "false")

        new File( pathToConfigFile ).write new Gson().toJson(configJson)
    }

}
/**
 * This task builds our swaggerSources task that our plugin
 * uses to go get our compiled generators/src/main/groovyScreenPlay.groovy
 * custom codegen class that extends SpringCodeGen.
 *
 * we then configure where to find the input json file and where to look for any
 * templates
 *
 * see: https://github.com/int128/gradle-swagger-generator-plugin#use-multiple-sources
 *
 *
 * to find all the remote templates for java spring in openAPI:
 * https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/JavaSpring
 *
 *
 *
 */

SERVICES.each {    service ->
    def pathToConfigFile = "swaggerjson/${service}/${service}-config.json"
    def pathToJson = "swaggerjson/${service}/${service}-service.json"
    def outputPath = "${buildDir}/${service}"
    // create a new swaggerSources task
    def ss = swaggerSources.create(service)
    // put the path for the input file
        ss.inputFile = file(pathToJson);
        // configure the settings
            ss.code {
                language = 'generators.ScreenPlay'
                templateDir = file('templates')
                components = ['models', 'apis']
                configFile = file(pathToConfigFile)
                outputDir = file(outputPath)
            }
}
/**
 * After code-gen has happened and they are in our /build folder
 * we put the classes in our source-sets to be consumed by our Junit tests
 */
SERVICES.each { service ->
    sourceSets {
        main {
            java {
                srcDir "$buildDir/${service}"
            }
            resources {
                srcDir "$buildDir/${service}/src/main/resources"
            }
        }
    }
}

// used to build the generator class before the generateSwaggerCode runs.
swaggerSources*.code*.dependsOn 'generators:jar'

// used to build the JSON files from gitlab of services
// class before the generateSwaggerCode runs.
swaggerSources*.code*.dependsOn 'getTitanApiSwaggerJson'

// makes sure when you run ./gradlew generateSwaggerCode
// that build cache has been cleared out.
swaggerSources*.code*.dependsOn clean

// on every build we run generate codegen
build.dependsOn generateSwaggerCode

// run spotlessApply task to remove unused imports that
// could potentially break builds.
compileJava.dependsOn spotlessJavaApply
build.dependsOn spotlessJavaApply

// on every compile we run out codegen
compileJava.dependsOn swaggerSources*.code
