buildscript {
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.90")
        classpath("com.diffplug.spotless:spotless-plugin-gradle:3.26.1")
        classpath('com.vertafore.autotest:qtest-serenity:1.0.1')
    }
}

plugins {
    id 'groovy'
    id 'maven-publish'
    id 'com.bmuschko.nexus' version '2.3.1' apply false
    id "com.diffplug.gradle.spotless" version "3.26.1"
    // swagger code-gen gradle plugin
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

//application{
//    mainClassName = 'com.vertafore.test.utilities.classgenerator.ServiceWrapperGenerator'
//}

allprojects {
    group 'com.vertafore'
    version '0.0.3-SNAPSHOT'

    apply plugin: 'com.vertafore.gradle.qtest.QTestSerenityPlugin'
    apply plugin: 'java-library'
    apply plugin: 'net.serenity-bdd.aggregator'

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    repositories(gradle.nexusConfiguration)
    repositories {
        jcenter()
    }

    // Publish
    apply plugin: 'com.bmuschko.nexus'
    apply plugin: 'net.serenity-bdd.aggregator'

    extraArchive {
        sources = true
        tests = true
        javadoc = true
    }

    nexus {
        sign = false
        repositoryUrl = 'https://nexus.util.v4af.com/repository/libs-release-local/'
        snapshotRepositoryUrl = 'https://nexus.util.v4af.com/repository/libs-snapshot-local/'
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    apply plugin: 'maven-publish'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar
            }
        }
    }

    // Make Gradle use the latest version of SNAPSHOT artifacts (no caching)
    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    test {
        systemProperties System.properties
        systemProperties.remove("java.endorsed.dirs")
    }
}

configurations {
    swaggerCodegenV2
    swaggerCodegenV3
}

dependencies {
    implementation localGroovy()
    // Serenity
    implementation group: 'net.serenity-bdd', name: 'serenity-core', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-model', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-screenplay', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-report-resources', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-screenplay-rest', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-ensure', version: '2.0.90'
    implementation group: 'net.serenity-bdd', name: 'serenity-junit', version: '2.0.90'
    // Vertafore
    implementation 'com.vertafore.core:foundation:10.0.1'
    // logging
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '0.9.26'
    // Service wrapper/model generator util
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    // swagger code-gen
//    swaggerCodegen 'io.swagger:swagger-codegen-cli:2.4.2'             // Swagger Codegen V2
//    implementation 'io.swagger:swagger-codegen-cli:2.4.2'
//    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.5'  // or Swagger Codegen V3
    swaggerCodegen 'org.openapitools:openapi-generator-cli:3.1.1'     // or OpenAPI Generator
    implementation 'org.openapitools:openapi-generator-cli:3.1.1'
//    implementation 'io.swagger:swagger-codegen-cli:2.4.2'
        swaggerCodegen project('generators')
}

swaggerSources {
    generateServiceWrapper {
        inputFile = file('authservice.json')
        code {
            language = 'generators.ScreenPlay'
            templateDir = file('templates')
            components = ['models', 'apis']
            configFile = file('config.json')
//            outputDir = file('outputDirectoryHere')
//            dependsOn validation
        }
    }
}



spotless {
    java {
        googleJavaFormat('1.6')
    }
}

test.finalizedBy(aggregate)
qtestsync.shouldRunAfter(aggregate)

gradle.startParameter.continueOnFailure = true

swaggerSources*.code*.dependsOn 'generators:jar'

build.dependsOn generateSwaggerCode
// Configure compile task dependency and source
compileJava.dependsOn swaggerSources.generateServiceWrapper.code
sourceSets.main.java.srcDir "${swaggerSources.generateServiceWrapper.code.outputDir}"
sourceSets.main.resources.srcDir "${swaggerSources.generateServiceWrapper.code.outputDir}/src/main/resources"